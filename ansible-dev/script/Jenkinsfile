pipeline {
    agent any
    environment {
        ARTIFACTORY_URL = 'http://100.26.227.196:8081'
        ARTIFACTORY_CREDENTIALS = 'jfrog-id' // Jenkins credentials ID for JFrog./* 
        ANSIBLE_SERVER = 'ec2-54-162-197-141.compute-1.amazonaws.com'
        SSH_CREDENTIALS = 'ansible-id' // Jenkins credentials ID for SSH to the Ansible server
        ANSIBLE_PATH = '/home/ec2-user/ansible-dev'
        SONARQUBE_URL = 'https://sonarcloud.io/'
        SONARQUBE_ORG = 'guilenedeveops'
        SONARQUBE_PROJECT_KEY = 'Guilenedeveops_ansible-training' 
        SONARQUBE_TOKEN = credentials('sonarcloud-ansible') // Store your SonarCloud token in Jenkins credentials

    }
    stages {
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('Sonarqube') {
                    script {
                        def scannerHome = tool 'sonarQube'
                        sh """
                            ${scannerHome}/opt/sonar-scanner
                            -Dsonar.organization=${SONARQUBE_ORG} \
                            -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=${SONARQUBE_URL} \
                            -Dsonar.login=${SONARQUBE_TOKEN}
                        """
                    }
                }
            }
        }
    
    

        stage('Zip Ansible Playbook') {
            steps {
                script {
                    def zipFileName = "ansible-playbook-${env.BUILD_ID}.zip"
                    sh "zip -r ${zipFileName} ."
                    archiveArtifacts artifacts: zipFileName, onlyIfSuccessful: true
                }
            }
        }
        stage('Upload to Artifactory') {
            steps {
                script {
                    def zipFileName = "ansible-playbook-${env.BUILD_ID}.zip"
                    sh """
                    curl -uadmin:AP7bxAPKkWrSXTi9tv2SeCxA3Wn -T ${zipFileName} "http://100.26.227.196:8081/artifactory/ansible-repo/<${zipFileName}"
                    """
                }
            }
        }
        stage('Deploy to Ansible Server') {
            steps {
                script {
                    def zipFileName = "ansible-playbook-${env.BUILD_ID}.zip"
                    sshagent (credentials: ['ansible-id']) {
                        sh """
                        scp -o StrictHostKeyChecking=no ${zipFileName} ec2-user@${ANSIBLE_SERVER}:${ANSIBLE_PATH}/
                        ssh -o StrictHostKeyChecking=no ec2-user@${ANSIBLE_SERVER} 'cd ${ANSIBLE_PATH} && unzip -o ${zipFileName}'
                        """
                    }
                }
            }
        }
    

       
    }
}


